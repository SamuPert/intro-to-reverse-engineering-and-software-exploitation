#!/usr/bin/python
# -*- coding: utf8 -*-
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import platform
import sys
import marshal
import types
from ctypes import *
print """
\x1b[38;5;226m   ▄██████▄   ▄██████▄   ▄█       ████████▄\x1b[m
\x1b[38;5;227m  ███    ███ ███    ███ ███       ███   ▀███\x1b[m
\x1b[38;5;228m  ███    █▀  ███    ███ ███       ███    ███\x1b[m
\x1b[38;5;229m ▄███        ███    ███ ███       ███    ███\x1b[m
\x1b[38;5;230m▀▀███ ████▄  ███    ███ ███       ███    ███\x1b[m
\x1b[38;5;229m  ███    ███ ███    ███ ███       ███    ███\x1b[m
\x1b[38;5;228m  ███    ███ ███    ███ ███▌    ▄ ███   ▄███\x1b[m
\x1b[38;5;227m  ████████▀   ▀██████▀  █████▄▄██ ████████▀\x1b[m
\x1b[38;5;214m  Winja CTF             \x1b[m\x1b[38;5;226m▀\x1b[m\x1b[38;5;214m               2018\x1b[m
"""
if (platform.system() != 'Linux' or
    platform.architecture()[0] != '64bit' or
    sys.version_info.major != 2 or sys.version_info.minor != 7):
  sys.exit("This application requires a 64-bit Python 2.7 running on Linux.")
if len(sys.argv) != 2:
  sys.exit("usage: gold.py <flag>")
flag = sys.argv[1]
if len(flag) >= 32:
  sys.exit("Meh.")
alphabet = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}")
for ch in flag:
  if ch not in alphabet:
    sys.exit("No.")
# Load library and get functions.
libc = CDLL('libc.so.6')
mmap_type = CFUNCTYPE(c_void_p, c_void_p, c_ulong, c_int, c_int, c_int, c_ulong)
mmap = cast(libc.mmap, mmap_type)
memcpy_type = CFUNCTYPE(None, c_void_p, c_void_p, c_ulong)
memcpy = cast(libc.memcpy, memcpy_type)
# Load code and data into memory.
# NOTE: This is hardcoded. In case of changes to the checker this needs to
# change as well.
entrypoint = 0x42000000
mem_start = 0x42000000 & 0xfffffffffffff000
mem_end = ((0x42001120 & 0xfffffffffffff000) +
           ((0x220 + 0xfff) & 0xfffffffffffff000) +
           0x4000)
mem = mmap(mem_start, mem_end - mem_start, 7, 0x32, -1, 0)
prog = '\x78\x9c\xab\x77\xf5\x71\x63\x62\x64\x64\x80\x01\x26\x06\x3b\x06\x28\xcf\x09\x44\x38\x40\xc5\x3d\x44\xe1\x4a\x80\x62\x16\x0c\xcc\x40\x92\x9d\x81\x0d\xac\x96\x15\x24\x28\x00\x97\x76\x42\xa6\x25\xa1\x86\xc1\x68\x98\x3a\x10\x97\x0d\x88\x15\x04\x21\x7c\x20\xed\x84\x42\x33\x41\xc5\x99\x50\xf5\x05\x3e\x2d\x49\x61\x63\x20\x1e\x08\x10\x56\x32\x0a\x46\xc1\x28\x18\x05\xa3\x60\x14\x8c\x82\x51\x30\x0a\x46\xc1\x28\x18\x05\xa3\x60\x14\x0c\x7b\x10\xea\xd1\xf9\xd4\xa3\xb3\x76\x87\xc7\x71\xd7\x03\x20\x3e\x90\x3e\x01\xa5\x2f\x40\xe9\x1b\x20\xfa\xb8\xeb\x1f\x10\xf5\x72\x1a\x90\xe8\x0e\xfd\xe3\xd1\xcb\xfa\x08\xd8\xb5\xe6\xdf\xc6\xc2\xc4\xbf\xed\x40\xf3\x03\xf6\x4e\xd7\x0f\x10\xe1\xd3\x50\xe1\x03\x2f\x98\x81\x32\x9d\xae\x6f\xba\x43\xdf\x78\x74\xbb\xee\xf0\x60\xbc\xc0\xbf\x0d\x28\x73\xa1\xdb\xf5\x43\xe7\xc1\xcb\xbf\x3a\x2f\x34\x3f\x60\xec\x70\x7d\x0d\xd1\x35\x55\x10\xa2\xcb\x00\x28\xe0\xfa\x07\x6a\x9e\xeb\x9f\x83\x2f\x98\x41\x26\xb8\xbe\xe1\xdf\xe6\xc2\x7a\xa0\xf3\x18\xff\xb6\xd0\xd7\x10\xfd\x8f\x3a\x2f\x70\x7e\xe8\x3c\x04\x94\xea\x08\x61\x3d\xd0\xec\xfa\x87\xb1\xb1\xf6\xcf\x7f\xa0\xe3\xf8\xdb\x62\xff\xff\xff\x7f\xdc\xf5\x07\xc4\xd5\x5f\x40\xd4\x6b\xa5\x6e\xd7\x2f\xfc\xdb\x7c\x58\x0f\x74\x87\x7e\x01\xda\xa6\x2e\x04\xb1\xcd\xf0\x04\xd0\x89\x8c\xae\x3f\x9a\x5d\xbf\x30\x36\xd7\x7e\x91\x2f\xbb\x71\xa6\xb9\xf6\x07\x03\xff\x94\x03\xb1\x87\xa1\xe1\xe3\x1f\x90\xb8\x2b\x7b\xf7\xbb\x0d\x25\xf3\xe7\xd9\xa9\x9c\x08\x5f\xea\xfb\x3e\xfd\x8c\xc9\x31\xf1\x16\x53\x85\x2b\x33\xa2\xa6\xae\x96\x2b\x95\xaf\xe3\x61\x71\xab\xe0\x6a\x9a\xb2\x2f\xe7\xc3\xf3\xed\x9b\xa5\x96\xbf\x4a\xd1\xe2\xc8\xe8\x7e\xf2\x55\x32\xe6\x8e\xcf\xca\xff\x7f\xbd\x9a\x17\x24\xbb\xaf\x2f\xaf\x7f\x54\x65\x14\xdc\xf6\xc3\x98\xb3\x72\xcb\xa2\xce\x89\xae\xd3\x65\xce\xc7\x9e\x5b\xa1\xd8\x6a\xd1\x51\x73\xfb\xdf\xe4\x9e\xe3\x86\x8e\xd5\x6f\x26\xdd\xf2\xd8\xfb\xfd\xd4\x4d\x09\xfb\x6d\x5d\x1b\x45\x8e\x3a\x31\x9c\x56\x5a\xeb\xb9\xd3\x4a\x34\x6d\xe6\x21\xb5\x85\x9a\xda\xcb\x1e\x7c\x99\xfd\xed\x73\xd0\xeb\x0b\xea\xb5\x8b\xf9\xe6\x5a\xff\x51\x3d\xfc\xdb\x32\xe1\x48\xe1\x8b\x4d\x1a\x61\xb2\x3f\x8b\x79\x57\x31\x99\x87\xea\x5f\x8c\xb6\x9d\x93\x7a\xef\x60\x96\xe0\xe5\x86\x35\x3a\xbf\x1a\x6f\xec\xe8\x0d\x2c\x60\xd4\x9d\xb5\x27\xef\xe4\xa5\x22\x9b\xbe\x7c\xe5\x03\xcf\xda\xef\xbf\x65\xff\x14\x29\x1d\xf2\xf1\xea\x53\x31\x97\xb2\x75\x0f\x99\xf5\xb8\xe3\xe2\xcd\xb6\xb2\xb2\xed\xcf\x8d\xb8\x2b\x94\x24\x90\xf9\x78\xc9\xf5\x69\x13\xfc\x84\xfb\xaf\x19\xf0\x9f\x75\x7e\xe9\xed\x00\x19\x0c\x62\x04\x8f\x10\x41\x86\x70\x40\x4c\x46\xb0\x08\x23\x9c\x00\xcb\x41\xb9\x10\x59\x06\x88\x20\x92\x62\x28\x09\x31\x03\xa6\x9e\x11\xa2\x9d\x11\xa6\x1a\xa2\x04\x2a\xcd\x80\x30\x17\x6a\x12\xcc\x16\x30\x93\x11\xc9\x1e\xb0\x16\x46\xa8\x4b\xa1\xe2\x70\x85\x50\x0b\x11\x5c\xe8\x78\x17\x92\x36\xb8\xed\x08\xcd\x10\xab\x73\x7a\x7d\x5d\x76\xd7\x34\x2d\x7b\x2c\xa7\x32\xf3\xde\xa2\x8b\x39\xd7\x9f\x2e\x8b\xfc\x77\xef\xe8\xed\xad\xbc\xc5\x4b\xfe\xce\x2b\x92\x74\x77\x76\xb6\x52\xd0\x08\x4d\x2a\xcd\x2b\x29\x55\x30\xd7\x33\xd2\x33\xd0\xb5\x28\x05\xf3\x8c\xf5\x8c\x34\x21\x22\x84\xf2\x20\x33\xc4\x09\x4e\x98\xe2\x4c\xf0\xf1\x30\x54\x71\x66\x0c\x33\x40\x26\xb0\x30\x7c\xfc\x8f\xcd\x7c\x6c\xe2\xdc\x60\x3d\x98\xe6\x2b\x02\xb1\x20\xb2\x38\x34\xc6\xb4\x60\xe2\xc2\xd0\xf1\x39\xa8\x7a\x7d\x98\xb8\x10\xaa\x7a\x4b\x20\x16\x42\xf2\x17\x6c\xfc\xcf\x85\x01\x34\x26\xc7\xc4\xe0\x20\x8c\x6a\x6f\x00\x0e\xf1\x70\x1c\xe2\x0c\xc9\x19\xa9\xc9\xd9\xa9\x45\x7a\xc9\x0c\xf1\xee\x3e\xfe\x4e\x8e\x3e\xf1\xfe\x6e\x6e\xc1\xae\x21\xf1\x21\x8e\x4e\x3e\xae\xf1\x0c\xb9\x99\x15\xf1\x49\x99\x25\xc5\x0c\x69\x39\x89\xe9\x60\x5e\x5a\x4e\x66\x41\x31\x43\x6a\x41\x3c\x54\x2b\x43\x7c\x7c\x52\x71\x71\x7c\x71\x49\x62\x51\x09\x43\x7c\x6a\x4a\x62\x49\x22\x90\xca\x4b\x61\x60\xd0\x2b\xae\xcc\x2d\x49\x4c\x02\xd2\x25\x45\x10\x3a\x03\xc6\x2a\x49\xad\x28\x61\xd0\x03\xab\xd5\x4b\xce\xcf\xcd\x4d\xcd\x2b\xc1\x16\xe4\x24\x03\x69\x06\xc4\x98\x28\x14\x40\xfc\x0b\x1d\xc0\x84\x8f\x9f\x42\x01\x1a\x17\x1c\x6f\x20\x31\x58\xca\x40\x1a\x4f\x85\xf0\x99\x50\xd5\x2b\xa0\xe9\x57\x87\xea\x47\x4f\xac\xc0\x70\x07\x03\x55\x34\x71\x46\x2c\x34\x9a\x15\x60\x90\x01\xd5\x1f\x00\x55\x08\x1a\x2b\x66\x07\x62\x0e\xa8\xbc\x04\x94\xe6\x44\x72\x3b\x32\xd8\x21\x02\xa1\x63\x70\xd8\x0f\x03\x82\x38\xf4\x8b\x40\xc7\xad\xd1\xfd\x85\xae\x1f\x00\x62\x0a\x5b\x60'.decode('zlib')
memcpy(
  mem + 0x42000000 - mem_start,
  create_string_buffer(prog[0x1000:0x1000+0x119]),
  0x119)
memcpy(
  mem + 0x42001120 - mem_start,
  create_string_buffer(prog[0x1120:0x1120+0x220]),
  0x220)
func_type = CFUNCTYPE(c_int, c_void_p)
func = cast(entrypoint, func_type)
def check(s):
  #raw_input()
  s = s.ljust(0x20, '\0')
  return func(create_string_buffer(s))
if check(flag):
  print "Well done!"
else:
  sys.exit("Nope.")
